package database;

import java.util.List;
import java.util.Scanner;
class GuestUser {

    protected DataBasesProperties dbObj;
    protected List<List<String>> data;
    protected Scanner scanner;

    public GuestUser(DataBasesProperties dbObj) {
        this.dbObj = dbObj;
        this.scanner = dbObj.scanner;
    }

    public void startMenu() {
        while (true) {
            System.out.println("\n--- Guest User Menu ---");
            System.out.println("1. Read from Database");
            System.out.println("2. Exit");

            try {
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                switch (choice) {
                    case 1 -> read();
                    case 2 -> {
                        System.out.println("Exiting Guest User Menu...");
                        return;
                    }
                    default -> System.out.println("Invalid choice, please try again.");
                }
            } catch (Exception e) {
                System.out.println("Invalid input. Please enter a valid option.");
                scanner.nextLine(); // Clear invalid input
            }
        }
    }

    protected void read() {
        String selectedDatabase = selectDatabase();
        if (selectedDatabase == null) {
            return;
        }

        dbObj.display("SHOW TABLES");
        if (dbObj.data == null || dbObj.data.isEmpty()) {
            System.out.println("No tables found in the selected database.");
            return;
        }

        System.out.println("Available tables:");
        for (int i = 0; i < dbObj.data.size(); i++) {
            System.out.println((i + 1) + " -> " + dbObj.data.get(i).get(0));
        }

        System.out.println("Choose a table by number:");
        int tableChoice = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        if (tableChoice > 0 && tableChoice <= dbObj.data.size()) {
            String selectedTable = dbObj.data.get(tableChoice - 1).get(0);
            System.out.println("1 -> Show Table Description\n2 -> Show Table Data");
            int option = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            if (option == 1) {
                dbObj.display("DESC " + selectedTable);
            } else if (option == 2) {
                dbObj.display("SELECT * FROM " + selectedTable);
                if (dbObj.data == null || dbObj.data.isEmpty()) {
                    System.out.println("No data found in the table.");
                } else {
                    System.out.println("Table data:");
                    dbObj.data.forEach(row -> System.out.println(String.join(", ", row)));
                }
            } else {
                System.out.println("Invalid option.");
            }
        } else {
            System.out.println("Invalid table selection.");
        }
    }

    protected String selectDatabase() {
        System.out.println("Fetching available databases...");
        dbObj.display("SHOW DATABASES");

        if (dbObj.data == null || dbObj.data.isEmpty()) {
            System.out.println("No databases found.");
            return null;
        }

        System.out.println("Choose a database:");
        for (int i = 0; i < dbObj.data.size(); i++) {
            System.out.println((i + 1) + " -> " + dbObj.data.get(i).get(0));
        }

        try {
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline
            if (choice > 0 && choice <= dbObj.data.size()) {
                String selectedDatabase = dbObj.data.get(choice - 1).get(0);
                dbObj.display("USE " + selectedDatabase);
                System.out.println("Switched to database: " + selectedDatabase);
                return selectedDatabase;
            } else {
                System.out.println("Invalid choice.");
                return null;
            }
        } catch (Exception e) {
            System.out.println("Invalid input. Returning to menu.");
            scanner.nextLine(); // Clear invalid input
            return null;
        }
    }
}
